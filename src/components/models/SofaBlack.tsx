/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 scene.gltf
Author: katjagricishina (https://sketchfab.com/katjagricishina)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/sofa-03550a3529c24611a12aa158747374e0
Title: Sofa
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { Group, Material } from 'three';

interface SofaBlackPops {
  [key: string]: any;
}

export const SofaBlack: React.FC<SofaBlackPops> = (props) => {
  const { nodes, materials } = useGLTF('../../../public/models/sofaBlack/scene.gltf') as unknown as {
    nodes: { [key: string]: Group };
    materials: { [key: string]: Material };
  };
  const sofaBlackRef = useRef<Group>(null);
  
  useFrame(() => {
    if (sofaBlackRef.current) {
      sofaBlackRef.current.rotation.y += 0.01;
    }
  });
  return (
    <group ref={sofaBlackRef} {...props} dispose={null}>
      <mesh geometry={(nodes.Object_2 as unknown as THREE.Mesh).geometry} material={materials['Scene_-_Root']} rotation={[-Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('../../../public/models/sofaBlack/scene.gltf')
